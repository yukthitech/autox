<test-file 
	xmlns:s="http://autox.yukthitech.com/steps"
	xmlns:f="http://autox.yukthitech.com/functions" 
	xmlns:wrap="http://xmlbeanparser.yukthitech.com/wrap">
	
	<test-suite name="ml-mongo-sessions" parallelExecutionEnabled="true">
		<setup>
			<s:mongo-query mongoResourceName="mongoResource">
				<query>
					{ 
						"delete": "AUTOX_TEST",
						"deletes": [
							{"q": {}, "limit": 0}
						]
					}
				</query>
			</s:mongo-query>
		</setup>
		
		<test-case name="mongoQueryTest" author="kranthi, kiran">
			<description>
				Ensure the mongo query execution is as expected.
			</description>

			<s:mongo-multi-query mongoResourceName="mongoResource">
				<query>
					{ 
						"insert": "AUTOX_TEST", 
						"documents" : [
							{"name": "test1", "entry": 1},
							{"name": "test2", "entry": 2},
							{"name": "test3", "entry": 3}
						] 
					}
				</query>
			</s:mongo-multi-query>

			<s:sleep time="2000"/>
		</test-case>

		<test-case name="mongoQueryTest2" author="kranthi, kiran">
			<description>
				Simple insert and count.
			</description>
			
			<s:mongo-js mongoResourceName="mongoResource">
				<script>
					db.AUTOX_TEST.insert({"name": "mlTestObj1", "desc": "Some desc"});
				</script>
			</s:mongo-js>
			
			<s:mongo-js mongoResourceName="mongoResource" resultAttribute="count">
				<script>
					return db.AUTOX_TEST.count({"name": "mlTestObj1"});
				</script>
			</s:mongo-js>
			<s:assert-equals actual="attr: count" expected="long: 1"/>
			
			<s:sleep time="2000"/>
		</test-case>

		<test-case name="mongoQueryTest3" author="kranthi, kiran">
			<description>
				Simple insert and count.
			</description>
			
			<s:mongo-js mongoResourceName="mongoResource">
				<script>
					db.AUTOX_TEST.insert({"name": "mlTestObj3", "desc": "Some desc"});
				</script>
			</s:mongo-js>
			
			<s:mongo-js mongoResourceName="mongoResource" resultAttribute="count">
				<script>
					return db.AUTOX_TEST.count({"name": "mlTestObj3"});
				</script>
			</s:mongo-js>
			<s:assert-equals actual="attr: count" expected="long: 1"/>
			
			<s:sleep time="2000"/>
		</test-case>

		<test-case name="mongoQueryTest4" author="kranthi, kiran">
			<description>
				Simple insert and count.
			</description>
			
			<s:mongo-js mongoResourceName="mongoResource">
				<script>
					db.AUTOX_TEST.insert({"name": "mlTestObj4", "desc": "Some desc"});
				</script>
			</s:mongo-js>
			
			<s:mongo-js mongoResourceName="mongoResource" resultAttribute="count">
				<script>
					return db.AUTOX_TEST.count({"name": "mlTestObj4"});
				</script>
			</s:mongo-js>
			<s:assert-equals actual="attr: count" expected="long: 1"/>
			
			<s:sleep time="2000"/>
		</test-case>

		<test-case name="mongoQueryWithObj">
			<description>
				Tests mongo query executions with objects.
			</description>

			<s:set expression="time" value="expr: now()"/>
			
			<s:mongo-multi-query mongoResourceName="mongoResource">
				<query> json(jel=true):
					{ 
						"insert": "AUTOX_TEST", 
						"documents" : [
							{
								"name": "testObj", 
								"time": "@fmarker: attr.time"
							}
						] 
					}
				</query>
			</s:mongo-multi-query>

			<s:mongo-js mongoResourceName="mongoResource" resultAttribute="objFromDb">
				<script>
					print("This is first line");
					return db.AUTOX_TEST.findOne({"name": "testObj"}, {"_id": 0});
				</script>
			</s:mongo-js>

			<s:assert-equals actual="attr: objFromDb">
				<expected>json(jel=true):
					{
						"name": "testObj", 
						"time": "@fmarker: attr.time"
					}
				</expected>
			</s:assert-equals>
			<s:sleep time="2000"/>
		</test-case>
	</test-suite>

</test-file>