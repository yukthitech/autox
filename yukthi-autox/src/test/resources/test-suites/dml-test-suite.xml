<testData xmlns:s="http://autox.yukthitech.com/steps" xmlns:wrap="http://xmlbeanparser.yukthitech.com/wrap">
	<testSuite name="dml-test-suites">
		<testCase name="insert_query">
			<description>
				Validates for inserting record in a table
			</description>

			<!--
				This comment is to test formatting
			-->
			<wrap:steps>
				<s:sql-dml-query countAttribute="countAttr" dataSourceName="dataSource" failOnNoUpdate="true">
					<query>
						INSERT INTO EMPLOYEE VALUES (1, 'employee1')
					</query>
				</s:sql-dml-query>

			</wrap:steps>
		
			<s:sql-assert dataSourceName="dataSource">
				<query>
					SELECT * FROM EMPLOYEE WHERE NAME = 'employee1'
				</query>
			
				<expectedRow>
					<column name="NAME">employee1</column>
				</expectedRow>
			</s:sql-assert>

			<s:assert-equals actual="sqlColumnList: SELECT NAME FROM EMPLOYEE WHERE NAME = 'employee1'">
				<expected>
					json: ["employee1"]
				</expected>
			</s:assert-equals>

			<s:sql-assert-value dataSourceName="dataSource" expectedValue="long: 1">
				<query>
					SELECT count(*) FROM EMPLOYEE WHERE NAME = 'employee1'
				</query>
			</s:sql-assert-value>

			<s:assert-equals actual="sqlVal: SELECT count(*) FROM EMPLOYEE WHERE NAME = 'employee1'" expected="long: 1"/>
		</testCase>
	
		<testCase dependencies="insert_query" name="update_query">
			<description>
				Validates for updating record in a table
			</description>
		
			<wrap:steps>
				<s:set expression="empId" value="1"/>
			
				<s:sql-dml-query countAttribute="updateCount" dataSourceName="dataSource">
					<query>
						UPDATE EMPLOYEE SET NAME = 'employee2' WHERE ID = ${attr.empId}
					</query>
				</s:sql-dml-query>
			</wrap:steps>
		
			<wrap:validations>
				<s:assert-equals actual="attr: updateCount" expected="int: 1"/>
			</wrap:validations>
		</testCase>
	
		<testCase dependencies="insert_query" name="delete_query">
			<description>
				Validates for deleting record in a table
			</description>
		
			<wrap:steps>
				<s:set expression="empId" value="int: 1"/>
			
				<s:sql-dml-query countAttribute="deleteCount" dataSourceName="dataSource">
					<query>
						DELETE FROM EMPLOYEE WHERE ID = ?{attr.empId}
					</query>
				</s:sql-dml-query>
			</wrap:steps>
		
			<wrap:validations>
				<s:assert-equals actual="attr: deleteCount" expected="int: 1"/>
			</wrap:validations>
		</testCase>
	
		<testCase name="multiple_query">
			<description>
				Validates for executing multiple query in table
			</description>
		
			<wrap:steps>
				<s:sql-multi-dml-query dataSourceName="dataSource">
					<query>
						INSERT INTO EMPLOYEE VALUES (1, 'employee1')
					</query>
				
					<query>
						INSERT INTO EMPLOYEE VALUES (3, 'employee2')
					</query>
				</s:sql-multi-dml-query>
			</wrap:steps>
		
			<wrap:validations>
				<s:sql-assert dataSourceName="dataSource">
					<query>
						SELECT COUNT(*) COUNT FROM EMPLOYEE WHERE ID &gt;= 1
					</query>
				
					<expectedRow>
						<column name="COUNT">2</column>
					</expectedRow>
				</s:sql-assert>
			</wrap:validations>
		</testCase>
	
		<testCase dependencies="multiple_query" name="column_list_query">
			<description>
				Validates for executing column-list query
			</description>
		
			<s:sql-load-query-column-list contextAttribute="empNames" dataSourceName="dataSource">
				<query>
					SELECT NAME
					FROM EMPLOYEE
					WHERE NAME IN ('employee1', 'employee2')
					ORDER BY NAME
				</query>
			</s:sql-load-query-column-list>

			<s:assert-equals actual="attr: empNames" expected="list: employee1, employee2"/>

			<s:sql-load-query-row-map contextAttribute="empNames" dataSourceName="dataSource">
				<query>
					SELECT NAME
					FROM EMPLOYEE
					WHERE NAME IN ('employee1', 'employee2')
					ORDER BY NAME
				</query>
				
				<column-transformation column="NAME">prop: attr.result.columnValue</column-transformation>
			</s:sql-load-query-row-map>

			<s:assert-equals actual="attr: empNames">
				<expected>json:
					[
						{"NAME": "employee1"},
						{"NAME": "employee2"}
					]
				</expected>
			</s:assert-equals>
		</testCase>
	
		<testCase dependencies="insert_query" name="fetch_value_query">
			<description>
				Validates fetching single value from query is working as expected
			</description>
		
			<wrap:steps>
				<s:sql-fetch-value-query contextAttribute="empId" dataSourceName="dataSource">
					<query>
						SELECT ID
						FROM EMPLOYEE
						WHERE NAME = 'employee1'
					</query>
				</s:sql-fetch-value-query>
			</wrap:steps>
		
			<wrap:validations>
				<s:assert-equals actual="attr: empId" expected="int: 1"/>
			</wrap:validations>
		</testCase>

		<testCase name="lobTest">
			<description>
				Checks wether insertion of clob and blob is working as expected or not
			</description>
		
			<s:sql-multi-dml-query dataSourceName="dataSource">
				<query>
					INSERT INTO LOB_TABLE(NAME, L_TEXT, BDATA) VALUES ('bdata1', 'bdata1 desc', ?{expr: resBlob('/data/data.json')})
				</query>
				<query>
					INSERT INTO LOB_TABLE(NAME, L_TEXT, CDATA) VALUES ('cdata1', 'cdata1 desc', ?{expr: resClob('/data/data.json')})
				</query>
			</s:sql-multi-dml-query>

			<s:sql-assert-value dataSourceName="dataSource" expectedValue="res(template=false): /data/data.json" convertExpression="json: $">
				<query>
					SELECT BDATA FROM LOB_TABLE WHERE NAME = 'bdata1'
				</query>
			</s:sql-assert-value>

			<s:sql-assert-value dataSourceName="dataSource" expectedValue="res(template=false): /data/data.json" convertExpression="json: $">
				<query>
					SELECT CDATA FROM LOB_TABLE WHERE NAME = 'cdata1'
				</query>
			</s:sql-assert-value>

			<s:assert-equals actual="sqlRowMaps: SELECT NAME, L_TEXT FROM LOB_TABLE ORDER BY NAME">
				<expected>
					json: [
						{"NAME": "bdata1", "L_TEXT": "bdata1 desc"},
						{"NAME": "cdata1", "L_TEXT": "cdata1 desc"}
					]
				</expected>
			</s:assert-equals>

			<s:assert-equals actual="sqlMap(keyColumn=NAME, valueColumn=L_TEXT): SELECT NAME, L_TEXT FROM LOB_TABLE ORDER BY NAME">
				<expected>
					json: {
						"bdata1": "bdata1 desc",
						"cdata1": "cdata1 desc"
					}
				</expected>
			</s:assert-equals>
		</testCase>
	</testSuite>
</testData>