<testData xmlns:s="http://autox.yukthitech.com/steps" xmlns:wrap="http://xmlbeanparser.yukthitech.com/wrap" xmlns:f="http://autox.yukthitech.com/functions">
	<function name="condSimpleGroup">
		<s:if condition="attr.returnFlag??">
			<s:return value="string: returnFlag: ${attr.returnFlag}"/>
		</s:if>
	
		<s:if condition="attr.flag == 1 ">
			<then>
				<s:return value="if-then"/>
			</then>
			<else>
				<s:return value="if-else"/>
			</else>
		</s:if>
	</function>

	<function name="sumWithoutReturn">
		<s:set expression="sumResult" value="expr: param.a + param.b | int: $"/>
		<s:set expression="test1" value="int: 10"/>
		<s:log message="Sum result was: ${attr.sumResult}"/>
	</function>

	<testSuite name="lang-test-suites">
		<testCase name="testSimpleFunc">
			<description>
				Tests simple function working which does not use return.
			</description>

			<f:sumWithoutReturn a="int: 10" b="int: 20"/>
		
			<s:assert-equals actual="attr: sumResult" expected="int: 30"/>
		</testCase>
	
		<testCase name="testExpressions">
			<description>
				Tests expressions are replaced in test suite files properly
			</description>
		
			<s:set expression="testAttr" value="SimpleValue"/>
		
			<s:set expression="testAttr2" value="string: Value: #{test.app.prop}"/>
			
			<s:set expression="testAttr3">
				<value>
					string: Value: #{test.app.prop} ${attr.testAttr}
				</value>
			</s:set>
		
			<s:set expression="testAttr4">
				<value>
					string: Value: ${attr.testAttr + ' #{test.app.prop}'}
				</value>
			</s:set>
			
		
			<s:assert-equals actual="attr: testAttr2" expected="string: Value: TestValue"/>
		
			<s:assert-equals actual="attr: testAttr3" expected="string: Value: TestValue SimpleValue"/>
		
			<s:assert-equals actual="attr: testAttr4" expected="string: Value: SimpleValue TestValue"/>
		</testCase>
	
		<testCase name="testIfThenCondition">
			<description>
				Tests if condition "then" is working
			</description>
		
			<wrap:steps>
				<s:set expression="flag" value="int: 1"/>

				<f:condSimpleGroup return-attr="ifExec"/>
			
				<s:log message="Post function call.."/>
				<s:assert-equals actual="attr: ifExec" expected="if-then"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testIfElseCondition">
			<description>
				Tests if condition "else" is working
			</description>
		
			<wrap:steps>
				<s:set expression="flag" value="int: 2"/>
			
				<f:condSimpleGroup return-attr="ifExec"/>
			
				<s:assert-equals actual="attr: ifExec" expected="if-else"/>
			</wrap:steps>
		</testCase>
	
		<function name="fetchProductOf10">
			<s:if condition="param.input == 1">
				<s:return value="int: 10"/>
			</s:if>
			<s:else-if condition="param.input == 2">
				<s:return value="int: 20"/>
			</s:else-if>
			<s:else-if condition="param.input == 3">
				<s:return value="int: 30"/>
			</s:else-if>
			<s:else>
				<s:return value="int: 100"/>
			</s:else>
		</function>

		<testCase name="testExternalIfElse">
			<description>
				Tests if condition bocks stacked next to each other.
			</description>
		
			<f:fetchProductOf10 input="int: 1" return-attr="prodVal"/>
			<s:assert-equals actual="attr: prodVal" expected="int: 10"/>

			<f:fetchProductOf10 input="int: 2" return-attr="prodVal"/>
			<s:assert-equals actual="attr: prodVal" expected="int: 20"/>

			<f:fetchProductOf10 input="int: 5" return-attr="prodVal"/>
			<s:assert-equals actual="attr: prodVal" expected="int: 100"/>
		</testCase>

		<testCase name="testReturn">
			<description>Tests return step</description>
		
			<wrap:steps>
				<s:set expression="returnFlag" value="true"/>
			
				<s:set expression="ifExec" value="test"/>
			
				<f:condSimpleGroup return-attr="ifExec"/>
			
				<s:remove name="returnFlag"/>
			
				<s:assert-equals actual="attr: ifExec" expected="string: returnFlag: true"/>
			</wrap:steps>
		</testCase>

		<testCase name="testSimpleFor">
			<description>
				Tests if for loop is working properly
			</description>
		
			<wrap:steps>
				<s:set expression="res" value=""/>
			
				<s:for end="5" start="1">
					<s:log message="for loop..."/>
					<s:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</s:for>
			
				<s:assert-equals actual="attr: res" expected="|1|2|3|4|5"/>
				
				<!-- Test with expressions -->
				<s:set expression="attrSt" value="1"/>
				<s:set expression="res" value=""/>
				
				<s:for start="attr: attrSt" end="int: 5">
					<s:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</s:for>
			
				<s:assert-equals actual="attr: res" expected="|1|2|3|4|5"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testForWithBreanAndContinue">
			<description>
				Tests if for loop is working properly with break and continue
			</description>
		
			<wrap:steps>
				<s:set expression="res" value=""/>
			
				<s:for end="20" start="1">
					<s:if condition="attr.loopVar % 2 != 0">
						<s:continue/>
					</s:if>
				
					<s:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				
					<s:if condition="attr.loopVar gte 10">
						<s:break/>
					</s:if>
				</s:for>
			
				<s:assert-equals actual="attr: res" expected="|2|4|6|8|10"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testSimpleWhileLoop">
			<description>
				Tests if simple while loop working
			</description>
		
			<wrap:steps>
				<s:set expression="i" value="int: 1"/>
			
				<s:set expression="res" value=""/>
			
				<s:while condition="attr.i lt 5">
					<s:set expression="res" value="${attr.res}|${attr.i}"/>
				
					<s:set expression="i" value="int: ${attr.i + 1}"/>
				</s:while>
			
				<s:assert-equals actual="attr: res" expected="|1|2|3|4"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testWhileLoopWithBranAndContinue">
			<description>
				Tests if while loop working with break and continue
			</description>
		
			<wrap:steps>
				<s:set expression="i" value="int: 0"/>
			
				<s:set expression="res" value=""/>
			
				<s:while condition="attr.i lt 20">
					<s:set expression="i" value="int: ${attr.i + 1}"/>
				
					<s:if condition="attr.i % 2 != 0">
						<s:continue/>
					</s:if>
				
					<s:set expression="res" value="${attr.res}|${attr.i}"/>
				
					<s:if condition="attr.i gte 10">
						<s:break/>
					</s:if>
				</s:while>
			
				<s:assert-equals actual="attr: res" expected="|2|4|6|8|10"/>
			</wrap:steps>
		</testCase>
	
		<!--
			=======================================================
			For Each loop test cases
			===================================================================
		-->
		<testCase name="testSimpleForEachLoopWithStr">
			<description>
				Tests if simple for-each loop working with string
			</description>
		
			<wrap:steps>
				<s:set expression="loopExpr" value="a,b,  c, d,e, f"/>
			
				<s:set expression="res" value=""/>
			
				<s:forEach expression="attr: loopExpr">
					<s:set expression="res" value="${attr.res}|${attr.loopVar}"/>
					<s:log message="test"/>
				</s:forEach>
			
				<s:assert-equals actual="attr: res" expected="|a|b|c|d|e|f"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testSimpleForEachLoopWithList">
			<description>
				Tests if simple for-each loop working with list
			</description>
		
			<wrap:steps>
				<s:set expression="res" value=""/>
			
				<s:forEach expression="prop: data.dataList">
					<s:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</s:forEach>
			
				<s:assert-equals actual="attr: res" expected="|a|b|c"/>
			</wrap:steps>
		</testCase>
	
		<data-bean s:beanType="java.util.ArrayList" id="dataList">
			<s:element>a</s:element>
		
			<s:element>b</s:element>
		
			<s:element>c</s:element>
		</data-bean>
	
		<testCase name="testSimpleForEachLoopWithList1">
			<description>
				Tests if simple for-each loop working with list
			</description>
		
			<wrap:steps>
				<s:set expression="res" value=""/>
			
				<s:forEach expression="prop: data.dataList">
					<s:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				</s:forEach>
			
				<s:assert-equals actual="attr: res" expected="|a|b|c"/>
			</wrap:steps>
		</testCase>
	
		<data-bean s:beanType="java.util.HashMap" id="dataMap">
			<s:entry key="key1">Value1</s:entry>
		
			<s:entry key="key2">Value2</s:entry>
		
			<s:entry key="key3">Value3</s:entry>
		</data-bean>
	
		<testCase name="testSimpleForEachLoopWithMap">
			<description>
				Tests if simple for-each loop working with Map
			</description>
		
			<wrap:steps>
				<s:set expression="res" value=""/>
			
				<s:forEach expression="prop: data.dataMap">
					<s:set expression="res" value="${attr.res}|${attr.loopVar.key}=${attr.loopVar.value}"/>
				</s:forEach>
			
				<s:assert-equals actual="attr: res" expected="|key1=Value1|key2=Value2|key3=Value3"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testForEachLoopWithBreakAndContinue">
			<description>
				Tests if for-each loop working with break and continue
			</description>
		
			<wrap:steps>
				<s:set expression="loopExpr" value="a,b,  c, d,e, f"/>
			
				<s:set expression="res" value=""/>
			
				<s:forEach expression="attr: loopExpr">
					<s:if condition="attr.loopVar == 'b'">
						<s:continue/>
					</s:if>
				
					<s:set expression="res" value="${attr.res}|${attr.loopVar}"/>
				
					<s:if condition="attr.loopVar == 'e'">
						<s:break/>
					</s:if>
				</s:forEach>
			
				<s:assert-equals actual="attr: res" expected="|a|c|d|e"/>
			</wrap:steps>
		</testCase>
	
		<testCase name="testPollAndCheck">
			<description>
				Ensures polling step works properly
			</description>
		
			<s:set expression="checkVar" value="int: 0"/>
		
			<s:pollAndCheck checkCondition="attr.checkVar gte 5" pollingInterval="500" timeOut="20" timeOutUnit="SECONDS">
				<poll>
					<s:set expression="checkVar" value="int: ${attr.checkVar + 1}"/>
				</poll>
			</s:pollAndCheck>
		</testCase>
	
		<testCase name="testTimerAndSummaryMssg">
			<description>
				Tests timer step and summary message
			</description>
		
			<s:startTimer name="timeTaken"/>
		
			<s:sleep time="10" timeUnit="SECONDS"/>
		
			<s:stopTimer name="timeTaken"/>
		
			<s:log level="SUMMARY" message="Time taken during test was: ${attr.timeTaken}"/>
		
			<s:assert-not-null value="attr.timeTaken"/>
		</testCase>
	
		<function name="factorialGroup1">
			<param-def name="value" description="value to be evaluated"/>
			
			<s:log message="Got param: ${param.value?c}"/>
			
			<s:if condition="param.value lt 2">
				<then>
					<s:set expression="result" value="int: 1"/>
					<s:return/>
				</then>
				<else>
					<s:log message="Executing factorial for ${param.value}"/>
				</else>
			</s:if>
		
			<f:factorialGroup1>
				<value>int: ${param.value - 1}</value>
			</f:factorialGroup1>
		
			<s:set expression="result" value="int: ${param.value * attr.result}"/>
		</function>
	
		<testCase name="testGroupRecursion">
			<description>
				Tests recursion working within the group
			</description>

			<f:factorialGroup1 value="int: 4"/>
		
			<s:assert-equals actual="attr: result" expected="int: 24"/>
		</testCase>
	
		<testCase name="testExecute">
			<description>Tests execute step</description>
		
			<s:set expression="checkVar" value="int: 1"/>
		
			<f:factorialGroup1 value="int: 4"/>
		
			<s:assert-equals actual="attr: result" expected="int: 24"/>
		</testCase>
	
		<testCase name="testCaseSetupCleanup">
			<description>
				Ensures test case setup/cleanup is getting executed as expected.
			</description>
		
			<setup>
				<s:set expression="setupVar" value="int: 1"/>
			</setup>
		
			<wrap:steps>
				<s:set expression="setupVar" value="int: ${attr.setupVar + 1}"/>
			
				<s:assert-equals actual="attr: setupVar" expected="int: 2"/>
			</wrap:steps>
		
			<cleanup>
				<s:set expression="setupVar" value="int: 10"/>
				<s:log message="As part of cleanup attr is setup as: ${attr.setupVar}"/>
			</cleanup>
		</testCase>
	
		<testCase dependencies="testCaseSetupCleanup" name="testCaseSetupCleanup_cleanupCheck">
			<description>
				Ensures cleanup is executed at end of testCaseSetupCleanup
			</description>
		
			<wrap:steps>
				<s:assert-equals actual="attr: setupVar" expected="int: 10"/>
			</wrap:steps>
		</testCase>

		<testCase name="testExprAndRegex">
			<description>
				Tests the working of exec expression parser and regex functions
			</description>

			<wrap:steps>
				<s:assert-equals actual="expr: regexParse('1,2,3,4', '(?&lt;val&gt;\\d+)')" expected="map: val=1"/>
				<s:assert-equals actual="expr: regexParseAll('a=1,b=2,c=3, d=4', '(?&lt;key&gt;\\w+)\\=(?&lt;val&gt;\\d+)')">
					<expected>json:
						[
							{"key": "a", "val": "1"},
							{"key": "b", "val": "2"},
							{"key": "c", "val": "3"},
							{"key": "d", "val": "4"}
						]
					</expected>
				</s:assert-equals>
				<s:assert-equals actual="expr: regexParseMatch('a=b=1', '(?&lt;key1&gt;\\w+)\\=(?&lt;key2&gt;\\w+)\\=(?&lt;val&gt;\\d+)')"
					expected="map: key1=a, key2=b, val=1"/>

				<s:assert-true value="condition: regexMatches('a=2332', '\\w+=\\d+')"/>
			</wrap:steps>
		
		</testCase>

		<testCase name="testJsonWithTypeParser">
			<description>
				Tests the working of jsonWithType expression parser
			</description>
			
			<s:set expression="attrJson">
				<value>[
							"java.util.HashSet",
							[
								"value1",
								"value2"
							]
				]</value>
			</s:set>

			<s:assert-equals expected="jsonWithType: ${attr.attrJson}" actual="set: value1, value2">
			</s:assert-equals>

			<s:assert-equals expected="attr: attrJson | jsonWithType: $" actual="set: value1, value2">
			</s:assert-equals>
		
		</testCase>

		<testCase name="testSortFilter">
			<description>
				Tests the working of sort filter
			</description>
			
			<s:set expression="unsortedLst">
				<value>
					json: [
						{"name": "xyz", "val": "20"},
						{"name": "bdc", "val": "25"},
						{"name": "yzx", "val": "30"},
						{"name": "abc", "val": "40"}
					]
				</value>
			</s:set>

			<s:set expression="sortedLst">
				<value>
					json: [
						{"name": "abc", "val": "40"},
						{"name": "bdc", "val": "25"},
						{"name": "xyz", "val": "20"},
						{"name": "yzx", "val": "30"}
					]
				</value>
			</s:set>

			<s:assert-equals expected="attr: sortedLst" actual="attr: unsortedLst | sort(propertyExpr=@{name}): $"/>
			<s:assert-equals expected="list: abc, bcd, def, fgh" actual="set: def, fgh, abc, bcd | sort: $"/>
			
			<s:assert-equals expected="list: fgh, def, bcd, abc" actual="set: def, fgh, abc, bcd | sort(desc=true): $"/>
			
			<!-- Test when multiple fields are being used -->
			<s:set expression="unsortedLst">
				<value>
					json: [
						{"name": "abc", "val": "30"},
						{"name": "yzx", "val": "30"},
						{"name": "abc", "val": "40"}
					]
				</value>
			</s:set>

			<s:set expression="sortedLst">
				<value>
					json: [
						{"name": "yzx", "val": "30"},
						{"name": "abc", "val": "40"},
						{"name": "abc", "val": "30"}
					]
				</value>
			</s:set>

			<s:assert-equals expected="attr: sortedLst" actual="attr: unsortedLst | sort(propertyExpr=@{name}-@{val}, desc=true): $"/>
		</testCase>

		<testCase name="testSubmapFunction">
			<description>
				Tests the submap function is working properly.
			</description>
			
			<s:set expression="map1">
				<value>json: {
					"key1": "val1",
					"key2": "val2",
					"key3": "val3",
					"key4": "val4"
				}</value>
			</s:set>

			<s:set expression="map2">
				<value>json: {
					"key1": "val1",
					"key2": "val2"
				}</value>
			</s:set>

			<s:assert-true value="expr: isSubmap(attr.map1, attr.map2)"/>
			<s:assert-false value="expr: isSubmap(attr.map2, attr.map1)"/>
		</testCase>

		<testCase name="testExtCommandExecution">
			<description>
				Test wether external command execution is working properly or not.
			</description>
			
			<s:execute-command name="javaVersion" expected-exit-code="0">
				<command>java -version</command>
			</s:execute-command>
		</testCase>

		<testCase name="testCreateFile">
			<description>
				Test wether create file step is working as expected or not.
			</description>
			
			<s:set expression="resAttribute" value="testVal"/>
			<s:create-temp-file pathAttr="tempFilePath" content="res(text=true, template=true): /data/test-text1.txt"/>

			<s:assert-equals actual="file(text=true): ${attr.tempFilePath}" expected="Some test content testVal"/>			
		</testCase>

		<function name="testTryCatch">
			<s:try>
				<s:log message="This is from try block"/>
				<s:set expression="var" value="try"/>

				<s:if condition="param.err">
					<s:throw message="Error mssg" value="int: 100"/>
				</s:if>
			</s:try>
			<s:catch errorAttr="ex">
				<s:log message="This is from catch block"/>
				<s:set expression="var" value="catch-${attr.ex.value!c}"/>
			</s:catch>
		</function>

		<testCase name="tryCatchSteps">
			<description>
				Tests the functionality of try-catch steps.
			</description>

			<f:testTryCatch err="boolean: false"/>
			<s:assert-equals actual="attr: var" expected="try"/>
			
			<f:testTryCatch err="boolean: true"/>
			<s:assert-equals actual="attr: var" expected="catch-100"/>
		</testCase>

		<testCase name="jsonAndJel">
			<description>
				Tests the JEL functionality in json.
			</description>

			<s:set expression="payload">
				<value>
					json: {
						"arr": [1, 2, 3],
						"map1": {
							"nestedMap": {
								"simpleName": "kranthi"
							},
							"name": "test1"
						},
						"map2": {
							"nestedMap": {
								"simpleName": "kiran"
							},
							"name": "test2"
						}
					}
				</value>
			</s:set>

			<s:assert-deep-equals>
				<actual>
					json(jel=true): {
						"attr1": "@xpath: /attr/payload/map1/name",
						"intAttr": "@fmarker: attr.payload.arr[1]",
						"attr2": "@xpathMulti: /attr/payload//simpleName"
					}
				</actual>
				<expected>
					json: {
						"attr1": "test1",
						"intAttr": 2,
						"attr2": ["kranthi", "kiran"]
					}
				</expected>
			</s:assert-deep-equals>

		</testCase>
	</testSuite>
</testData>